<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.teamplete.dao.TaskDAO">

		<resultMap type="TaskVO" id="taskMap">
			<result column="task_id" property="taskId" />
			<result column="writer_id" property="writerId" />
			<result column="content" property="taskContent" />
			<result column="team_id" property="teamId" />
			<result column="task_date" property="taskDate" />
			<result column="charge_memberid" property="chargeMemberid" />
		</resultMap>
		
		<resultMap type="ChargeVO" id="chargeMap">
			<result column="charge_id" property="chargeId" />
			<result column="charge_memberid" property="chargeMemberid" />
			<result column="task_id" property="taskId" />
		</resultMap>
		
   <resultMap type="TaskFileVO" id="taskFileMap">
      <result column="file_no" property="fileNo" />
      <result column="file_name_key" property="fileNameKey" />
      <result column="file_name" property="fileName" />
      <result column="file_path" property="filePath" />
      <result column="file_size" property="fileSize" />
      <result column="del_yn" property="delYN" />
      <result column="ins_user_id" property="insUserId" />
      <result column="ins_date" property="insDate" />
      <result column="task_id" property="taskId" />
   </resultMap>
   
   	<resultMap type="MemberVO" id="memberMap">
		<result column="reg_date" property="regDate" />
	</resultMap>


	<!-- 태스크 생성 -->
	<insert id="insertTask" parameterType="TaskVO">
		insert into task_tb(task_id, writer_id, team_id, title, content, deadline)
		values(task_seq.nextval, #{writerId}, #{teamId}, #{title}, #{taskContent}, #{deadline})
	</insert>
	
	
	<!-- 모든 태스크 조회 -->
	<select id="selectAllTask" parameterType="int" resultMap="taskMap">
		select task_id, writer_id, M.name, team_id, title, content, deadline, task_date
		 from task_tb T
		  left outer join member_tb M
           on T.writer_id = M.memberid
		    where team_id = #{teamId}
		     order by task_id desc
	</select>
	
	<!-- 특정 태스크 상세 -->
	<select id="selectTask" parameterType="int" resultMap="taskMap">
		select task_id, writer_id, M.name, team_id, title, content, deadline, task_date
		 from task_tb T
		  left outer join member_tb M
           on T.writer_id = M.memberid
		    where task_id = #{taskId}
	</select>
	
	<!-- 태스크 업데이트 -->
    <update id="updateTask" parameterType="TaskVO">
    	update task_tb
    	 set
    	  title = #{title}, content = #{taskContent}, deadline = #{deadline}, task_date = SYSDATE
    	   where task_id = #{taskId}
    </update>
    
    <!-- 태스크 삭제 -->
    <delete id="deleteTask" parameterType="int">
    	delete task_tb
    	 where task_id = #{taskId}
    </delete>
    
   <!-- task 파일업로드 -->
   <insert id="insertTaskFile" parameterType="TaskFileVO">
      insert into task_file(file_no, file_name_key, file_name, file_path, file_size, del_yn, ins_user_id, task_id)
       values(task_file_seq.nextval, #{fileNameKey}, #{fileName}, #{filePath}, #{fileSize}, #{delYN}, #{insUserId}, task_seq.currval)
   </insert>
   
   <!-- task 수정시 파일 업로드 -->
   <insert id="insertTaskFileModify" parameterType="TaskFileVO">
      insert into task_file(file_no, file_name_key, file_name, file_path, file_size, del_yn, ins_user_id, task_id)
       values(task_file_seq.nextval, #{fileNameKey}, #{fileName}, #{filePath}, #{fileSize}, #{delYN}, #{insUserId}, #{taskId})
   </insert>
   
   <!-- task 수정시 파일 삭제 -->
   <delete id="deleteTaskFile" parameterType="int">
      delete task_file
       where file_no = #{fileNo}
   </delete>
   
   <!-- task의 모든 파일 정보 조회 -->
   <select id="selectAllTaskFiles" parameterType="int" resultMap="taskFileMap">
      select file_no, file_name_key, file_name, file_path, CEIL(file_size / 1024) AS file_size, del_yn, ins_user_id, ins_date, task_id
       from task_file
        where task_id = #{taskId}
   </select>
   
   <!-- 태스크 담당자 추가 -->
   <insert id="insertCharge" parameterType="ChargeVO">
      insert into charge_tb(charge_id, charge_memberid, submit, task_id)
       values(charge_seq.nextval, #{chargeMemberid}, #{submit}, task_seq.currval)
   </insert>
   
   
   <!-- 태스크 수정 시 태스크 담당자 추가  -->
   <insert id="insertChargeModify" parameterType="ChargeVO">
      insert into charge_tb(charge_id, charge_memberid, submit, task_id)
       values(charge_seq.nextval, #{chargeMemberid}, #{submit}, #{taskId})
   </insert>
   
   <!-- 태스크 수정 시 태스크 담당자 삭제 -->
   <delete id="deleteCharge" parameterType="int">
      delete charge_tb
       where charge_id = #{chargeId}
   </delete>
   
   <!-- 태스크 담당자 전체 조회 -->
   <select id="selectAllsubmit" parameterType="int" resultMap="chargeMap">
      select C.charge_id, C.charge_memberid, M.profile, M.name, C.submit
       from charge_tb C
        left outer join member_tb M
         on C.charge_memberid = M.memberid
          where C.task_id = #{taskId}
   </select>
   
   <!-- 태스크 담당자 조회 (미제출자) -->
   <select id="selectNsubmit" parameterType="int" resultMap="chargeMap">
      select C.charge_id, C.charge_memberid, M.profile, M.name, C.submit
       from charge_tb C
        left outer join member_tb M
         on C.charge_memberid = M.memberid
          where C.task_id = #{taskId} and C.submit = 'N'
   </select>
   
   <!-- 태스크 담당자 조회 (제출자) -->
   <select id="selectYsubmit" parameterType="int" resultMap="chargeMap">
      select C.charge_id, C.charge_memberid, M.profile, M.name, C.submit
       from charge_tb C
        left outer join member_tb M
         on C.charge_memberid = M.memberid
          where C.task_id = #{taskId} and C.submit = 'Y'
   </select>
   
   <!-- 태스크 담당자 submit update -->
   <update id="updateSubmit" parameterType="ChargeVO">
      update charge_tb
       set
        submit = #{submit}
         where charge_id = #{chargeId}
   </update>
   
   <!-- 태스크 담당자가 아닌 팀의 멤버들만 조회 -->
   <select id="notTaskChargeMembers" parameterType="hashmap" resultMap="memberMap">
      	select distinct M.memberid, M.name
    	 from member_tb M
    	  left outer join team_tb T
    	   on M.memberid = T.owner_id
    	    left outer join team_member_tb TM
    	     on M.memberid = TM.member_id
    	      where T.team_id = #{teamId} and
    	       M.memberid not in(select charge_memberid from charge_tb where task_id = #{taskId}) or
                TM.team_id = #{teamId} and 
                 M.memberid not in(select charge_memberid from charge_tb where task_id = #{taskId})
   </select>
   
   
   <!-- 모든 태스크 중 로그인 중인 사용자의 제출하지 않은 태스크 목록  -->
   <select id="notSubmitMyTask" parameterType="int" resultMap="taskMap">
      select T.task_id, writer_id, team_id, title, content, deadline, task_date, C.charge_memberid
       from task_tb T
        full outer join charge_tb C
         on T.task_id = C.task_id
          where T.team_id = #{teamId} and C.submit = 'N'
   </select>
   
   
   <select id="notSubmitMyTaskAll" parameterType="String" resultMap="taskMap">
      select T.task_id, writer_id, team_id, title, content, deadline, task_date, C.charge_memberid
       from task_tb T
        full outer join charge_tb C
         on T.task_id = C.task_id
          where C.charge_memberid = #{memberId} and C.submit = 'N'
   </select>
   
   
   <!-- 특정 파일 상세 -->
   <select id="selectOneFile" parameterType="int" resultMap="taskFileMap">
      select file_no, file_name_key
       from task_file
        where file_no = #{fileNo}
   </select>

</mapper>